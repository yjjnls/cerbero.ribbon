# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
from cerbero.tools.libtool import LibtoolLibrary
import platform
if platform.system() == 'Windows':
    from cerbero.tools import software
from cerbero.errors import CerberoException
from cerbero.utils import to_unixpath
import shutil

PC_OPENSSL_TMPL='''
prefix=%(prefix)s
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: OpenSSL
Description: Secure Sockets Layer and cryptography libraries and tools
Version: %(version)s
Libs: -L${libdir} -lcrypto -lssl
Cflags: -I${includedir}
'''

PC_LIBSSL_TMPL='''
prefix=%(prefix)s
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: OpenSSL-libssl
Description: Secure Sockets Layer and cryptography libraries
Version: %(version)s
Requires.private: libcrypto
Libs: -L${libdir} -lssl
Cflags: -I${includedir} 
'''

PC_LIBCRYPTO_TMPL='''
prefix=%(prefix)s
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include
enginesdir=${libdir}/engines

Name: OpenSSL-libcrypto
Description: OpenSSL cryptography library
Version: %(version)s
Requires: 
Libs: -L${libdir} -lcrypto
Cflags: -I${includedir} 
'''

class Recipe(recipe.Recipe):
    name = 'openssl'
    version = '1.1.0e'
    stype = SourceType.TARBALL
    btype = BuildType.MAKEFILE
    url = 'https://www.openssl.org/source/openssl-1.1.0e.tar.gz'
    if platform.system() == 'Windows':
        config_sh = 'Configure'
        configure_tpl ='perl %(config-sh)s %(options)s --prefix=%(prefix)s'
    elif platform.system() == 'Linux':
        config_sh = './config'
        configure_tpl = "%(config-sh)s shared --prefix=%(prefix)s"
    files_bins =['openssl']
    files_libs = ['libssl','libcrypto']
    files_devel = ['include/openssl', 'lib/pkgconfig/openssl.pc']
    


    def prepare(self):
        if self.config.target_platform == Platform.WINDOWS:
            self._remove_steps ([BuildSteps.GEN_LIBFILES])

            perl =  to_unixpath( os.path.abspath( software.ActivePerl().path() ) )
            #print perl
            #if not perl:
			    #print 'ActivePerl not installed'
                #CerberoException('ActivePerl not installed')

            self.new_env = software.VisualStudio(self.config.target_arch).environ()
            self.new_env['PATH']=self.new_env['VisualStudioPath']+';' + os.environ['PATH']
    
            if self.config.target_arch == Architecture.X86:
                self.configure_options = 'VC-WIN32'
            elif self.config.target_arch == Architecture.X86_64:
                self.configure_options = 'VC-WIN64A'

            self.configure_tpl =perl +'.exe' + ' %(config-sh)s %(options)s --prefix=%(prefix)s --openssldir=%(prefix)s/bin/ssl'

            self.make = 'nmake.exe -f Makefile'
            self.make_install = 'nmake.exe -f Makefile install'


    def compile(self):
        if self.config.target_platform == Platform.WINDOWS:
            suffix={Architecture.X86:'-1_1',Architecture.X86_64:'-1_1-x64'}[self.config.target_arch]
            #modify makfile lib related name to fit cerber rules
            f = open(os.path.join(self.make_dir,'makefile'),'r')
            content = f.read()
            f.close()
            assert len(content) > 100
            for name in ('libssl','libcrypto'):
                content = content.replace( name + suffix ,name,-1 )
                content = content.replace( name + '.lib', name[3:]+'.lib',-1 )

            f = open(os.path.join(self.make_dir,'makefile'),'w')
            f.write(content)
            f.close()
            import time
            time.sleep(1)

            super(Recipe,self).compile()



    def post_install(self):
        if platform.system() == 'Windows':        
            self._process_libs()
            self._install_pc()

    def _process_libs(self):
        if self.config.target_platform == Platform.WINDOWS:
            defs = shell.find_files('*.def', self.make_dir)
            for d in defs:
                name= os.path.basename(d)[:-4]
                libname=name.split('-')[0]            
                shutil.copy( d, os.path.join( self.config.prefix, 'lib',libname+'.def'))
                shell.check_call('dlltool --dllname %(prefix)s/bin/%(name)s.dll --def %(prefix)s/lib/%(libname)s.def --output-lib %(prefix)s/lib/%(libname)s.dll.a '%{
                    'name':name, 'prefix':self.config.prefix ,'libname':libname} )

            #libd =os.path.join( self.config.prefix, 'lib')

            #shutil.copy2( os.path.join( libd,'libssl.lib'),os.path.join( libd,'ssl.lib'))
            #shutil.copy2( os.path.join( libd,'libcrypto.lib'),os.path.join( libd,'crypto.lib'))


    def _install_pdb(self):
        pdbs  = shell.find_files('bin/*.pdb', self.config.prefix)
        pdbs += shell.find_files('lib/engines-1_1/*.pdb',self.config.prefix)
        
        for pdb  in pdbs:
            dst =os.path.join(  self.config.prefix,'pdb/openssl')
            if os.path.isdir(dst):
               shutil.rmtree( dst )
            os.makedirs( dst )
            shutil.move( pdb, dst )


    def _install_test(self):
        import shutil
        openssld =os.path.join(  self.config.prefix,'tests/openssl')
        rootd=self.make_dir
        for d in ('certs','ct','d2i-tests','ocsp-tests',
                  'recipes','smime-certs','ssl-tests','testlib'):
            src = os.path.join( rootd,'test',d)
            dst = os.path.join( openssld,'test',d)
            shell.copy_dir( src ,dst )

        pattern='test/[a-Z0-9_]*test[a-Z0-9_]**'
        if self.config.target_platform == Platform.WINDOWS:
            pattern +='.exe'
        tests =shell.find_files( pattern ,rootd )
        tests +=shell.find_files( "test/*.pl" ,rootd )
        for test in tests:
            shutil.copy( test , os.path.join( openssld ,'test'))
            print test,"@"

    def _install_pc(self):
        pkgconfigd = os.path.join(self.config.prefix,'lib/pkgconfig')
        if not os.path.isdir( pkgconfigd):
            os.makedirs( pkgconfigd)


        f =open( os.path.join(pkgconfigd,'openssl.pc'),'w')
        f.write( PC_OPENSSL_TMPL%{ 'prefix':self.config.prefix,'version':self.version})
        f.close()

        f =open( os.path.join(pkgconfigd,'libssl.pc'),'w')
        f.write( PC_LIBSSL_TMPL%{ 'prefix':self.config.prefix,'version':self.version})
        f.close()

        f =open( os.path.join(pkgconfigd,'libcrypto.pc'),'w')
        f.write( PC_LIBCRYPTO_TMPL%{ 'prefix':self.config.prefix,'version':self.version})
        f.close()



