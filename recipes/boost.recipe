# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
#from cerbero.tools.libtool import LibtoolLibrary
from cerbero.utils import shell
from cerbero.tools.pkgconfig import PkgConfigWritter
import re

class Recipe(recipe.Recipe):
    name = 'boost'
    version = '1.64.0'
    stype = SourceType.TARBALL
    btype = BuildType.CUSTOM
	tarball_dirname = 'boost_1_64_0'
    url = 'https://dl.bintray.com/boostorg/release/1.64.0/source/boost_1_64_0.tar.bz2'
    licenses = [License.BSD_like]

    _toolset = ''
    _bootstrap = ''
    
    _build = ''
    _mode = ''
    _options = ''

    def configure(self):
        self._mode = self.config.build_type.lower()
        if self._mode == 'debug':
            _options += ' python-debugging=on'

        if self.config.target_arch == Architecture.X86:
            _options += ' address-model=64'

        if self.config.target_platform == Platform.LINUX:
            self._toolset='gcc'
            self._bootstrap='bootstrap.sh'
        else:
            pass

        print self.build_dir

        shell.call('./%s'%(self._bootstrap), self.build_dir)


    def compile(self):
        if self.config.target_platform == Platform.LINUX:
            self._build = './b2 toolset=%s '\
                          '--without-mpi '\
                          '--without-coroutine2 '\
                          '--without-graph_parallel '\
                          '--without-python ' \
                          'link=shared '\
                          '--stagedir=%s variant=%s %s'%(self._toolset, self._mode, self._mode, self._options)
        else:
            pass
        shell.call(self._build, self.build_dir)


    def install(self):
        shell.copy_dir('%s/boost'%(self.build_dir,), '%s/boost'%(self.config.install_dir))

        pkgdir = os.path.join(self.config.prefix, 'lib', 'pkgconfig')
        if self.config.target_platform == Platform.LINUX:
            libs = shell.find_files('*.so', '%s/%s/lib'%(self.build_dir,self._mode))
            for lib_abs_path in libs:
                shell.call('cp -f %(lib)s %(install_dir)s/lib; cp -f %(lib)s.%(version)s %(install_dir)s/lib'% {
                           'lib' : lib_abs_path, 
                           'install_dir' : self.config.install_dir,
                           'version' : self.version }, self.build_dir)

                name = re.findall(r"%s/%s/lib/lib(.*).so"%(self.build_dir, self._mode), lib_abs_path)[0]
                boost_pc = PkgConfigWritter(name, 'BOOST %s'%(name), self.version, 
                           '', '-L${libdir} -l%s'%(name), '-I${includedir} -DBOOST_ALL_DYN_LINK', self.config.prefix)
                boost_pc.save(name, pkgdir)
